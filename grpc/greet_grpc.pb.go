// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.11
// source: greet.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Greeter_OneToOne_FullMethodName = "/Greeter/OneToOne"
	Greeter_MulToOne_FullMethodName = "/Greeter/MulToOne"
	Greeter_OneToMul_FullMethodName = "/Greeter/OneToMul"
	Greeter_MulToMul_FullMethodName = "/Greeter/MulToMul"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	OneToOne(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	MulToOne(ctx context.Context, opts ...grpc.CallOption) (Greeter_MulToOneClient, error)
	OneToMul(ctx context.Context, in *Request, opts ...grpc.CallOption) (Greeter_OneToMulClient, error)
	MulToMul(ctx context.Context, opts ...grpc.CallOption) (Greeter_MulToMulClient, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) OneToOne(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, Greeter_OneToOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) MulToOne(ctx context.Context, opts ...grpc.CallOption) (Greeter_MulToOneClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[0], Greeter_MulToOne_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterMulToOneClient{stream}
	return x, nil
}

type Greeter_MulToOneClient interface {
	Send(*Request) error
	CloseAndRecv() (*Reply, error)
	grpc.ClientStream
}

type greeterMulToOneClient struct {
	grpc.ClientStream
}

func (x *greeterMulToOneClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterMulToOneClient) CloseAndRecv() (*Reply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) OneToMul(ctx context.Context, in *Request, opts ...grpc.CallOption) (Greeter_OneToMulClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[1], Greeter_OneToMul_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterOneToMulClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_OneToMulClient interface {
	Recv() (*Reply, error)
	grpc.ClientStream
}

type greeterOneToMulClient struct {
	grpc.ClientStream
}

func (x *greeterOneToMulClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) MulToMul(ctx context.Context, opts ...grpc.CallOption) (Greeter_MulToMulClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[2], Greeter_MulToMul_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterMulToMulClient{stream}
	return x, nil
}

type Greeter_MulToMulClient interface {
	Send(*Request) error
	Recv() (*Reply, error)
	grpc.ClientStream
}

type greeterMulToMulClient struct {
	grpc.ClientStream
}

func (x *greeterMulToMulClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterMulToMulClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Sends a greeting
	OneToOne(context.Context, *Request) (*Reply, error)
	MulToOne(Greeter_MulToOneServer) error
	OneToMul(*Request, Greeter_OneToMulServer) error
	MulToMul(Greeter_MulToMulServer) error
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) OneToOne(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OneToOne not implemented")
}
func (UnimplementedGreeterServer) MulToOne(Greeter_MulToOneServer) error {
	return status.Errorf(codes.Unimplemented, "method MulToOne not implemented")
}
func (UnimplementedGreeterServer) OneToMul(*Request, Greeter_OneToMulServer) error {
	return status.Errorf(codes.Unimplemented, "method OneToMul not implemented")
}
func (UnimplementedGreeterServer) MulToMul(Greeter_MulToMulServer) error {
	return status.Errorf(codes.Unimplemented, "method MulToMul not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_OneToOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).OneToOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_OneToOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).OneToOne(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_MulToOne_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).MulToOne(&greeterMulToOneServer{stream})
}

type Greeter_MulToOneServer interface {
	SendAndClose(*Reply) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type greeterMulToOneServer struct {
	grpc.ServerStream
}

func (x *greeterMulToOneServer) SendAndClose(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterMulToOneServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_OneToMul_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).OneToMul(m, &greeterOneToMulServer{stream})
}

type Greeter_OneToMulServer interface {
	Send(*Reply) error
	grpc.ServerStream
}

type greeterOneToMulServer struct {
	grpc.ServerStream
}

func (x *greeterOneToMulServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_MulToMul_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).MulToMul(&greeterMulToMulServer{stream})
}

type Greeter_MulToMulServer interface {
	Send(*Reply) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type greeterMulToMulServer struct {
	grpc.ServerStream
}

func (x *greeterMulToMulServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterMulToMulServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OneToOne",
			Handler:    _Greeter_OneToOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MulToOne",
			Handler:       _Greeter_MulToOne_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "OneToMul",
			Handler:       _Greeter_OneToMul_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MulToMul",
			Handler:       _Greeter_MulToMul_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "greet.proto",
}
